{"version":3,"sources":["components/Number.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Number","_this","this","react_default","a","createElement","className","style","backgroundColor","props","active","onClick","handleClick","id","disabled","status","value","Component","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomNumbers","Array","from","length","size","map","Math","ceil","random","target","_","sampleSize","reduce","accum","current","state","activeButtons","remainingSeconds","bind","assertThisInitialized","startGame","_this2","setState","intervalId","setInterval","prev","newRemainingSeconds","clearInterval","slice","indexOf","push","index","splice","gameStatus","ids","_this3","sumSelected","console","log","autoPlay","_this4","Number_Number","key","onReset","App","gameId","resetGame","prevState","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11de87db.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Number extends Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"number\"\r\n        style={{\r\n          backgroundColor: this.props.active !== -1 ? \"lightgreen\" : \"#eee\"\r\n        }}\r\n        onClick={() => this.props.handleClick(this.props.id)}\r\n        disabled={this.props.status !== \"playing\"}\r\n      >\r\n        {this.props.value}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Number from \"./Number\";\r\nimport _ from \"lodash\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      status: \"new\",\r\n      activeButtons: [],\r\n      remainingSeconds: 10\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.startGame = this.startGame.bind(this);\r\n  }\r\n\r\n  randomNumbers = Array.from({ length: this.props.size }).map(\r\n    () => Math.ceil(Math.random() * 13) + 1\r\n  );\r\n  target = _.sampleSize(this.randomNumbers, this.props.sampleSize).reduce(\r\n    (accum, current) => accum + current\r\n  );\r\n  //function to start the game\r\n  startGame() {\r\n    this.setState({ status: \"playing\" }, () => {\r\n      this.intervalId = setInterval(() => {\r\n        this.setState(prev => {\r\n          const newRemainingSeconds = prev.remainingSeconds - 1;\r\n          if (newRemainingSeconds === 0) {\r\n            clearInterval(this.intervalId);\r\n            return { status: \"lost\", remainingSeconds: 0 };\r\n          }\r\n          return { remainingSeconds: newRemainingSeconds };\r\n        });\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  //function to keep track of the selected numbers\r\n  handleClick(id) {\r\n    //make a shallow copy of the activeButtons\r\n    //Then update the activeButtons and set the new state\r\n    const activeButtons = this.state.activeButtons.slice();\r\n    if (activeButtons.indexOf(id) === -1) {\r\n      activeButtons.push(id);\r\n    } else {\r\n      let index = activeButtons.indexOf(id);\r\n      activeButtons.splice(index, 1);\r\n    }\r\n    this.setState({ activeButtons: activeButtons });\r\n    this.gameStatus(activeButtons);\r\n  }\r\n\r\n  //function to calculate the sum of selected numbers\r\n\r\n  gameStatus(ids) {\r\n    const sumSelected = ids.reduce((accum, current) => {\r\n      return accum + this.randomNumbers[current];\r\n    }, 0);\r\n    if (ids.length === 4 && sumSelected === this.target) {\r\n      clearInterval(this.intervalId);\r\n      this.setState({ status: \"won\" });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"new\");\r\n  }\r\n  componentDidMount() {\r\n    if (this.props.autoPlay) {\r\n      this.startGame();\r\n    }\r\n  }\r\n  render() {\r\n    const status = this.state.status;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div id=\"target\" className={this.state.status}>\r\n          {status === \"new\" ? \"Target\" : this.target}\r\n        </div>\r\n        <div className=\"challenge-numbers\">\r\n          {this.randomNumbers.map((value, index) => (\r\n            <Number\r\n              id={index}\r\n              key={index}\r\n              value={status === \"new\" ? \"?\" : value}\r\n              handleClick={this.handleClick}\r\n              active={this.state.activeButtons.indexOf(index)}\r\n              status={this.state.status}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"footer\">\r\n          Pick 4 Numbers that add up to{\" \"}\r\n          {status === \"new\" ? \"the target\" : this.target} in 10 seconds.\r\n          <h2>\r\n            {this.state.status === \"new\"\r\n              ? \"Click start when ready\"\r\n              : this.state.status === \"playing\"\r\n              ? this.state.remainingSeconds\r\n              : this.state.status === \"lost\"\r\n              ? \"You lose!\"\r\n              : \"You Win!!!\"}\r\n          </h2>\r\n          <div className=\"gameButtons\">\r\n            <button\r\n              id=\"start\"\r\n              className={this.state.status === \"new\" ? \"visible\" : \"hidden\"}\r\n              onClick={this.startGame}\r\n            >\r\n              Start\r\n            </button>\r\n            <button\r\n              id=\"reset\"\r\n              className={\r\n                this.state.status === \"lost\" || this.state.status === \"won\"\r\n                  ? \"visible\"\r\n                  : \"hidden\"\r\n              }\r\n              onClick={this.props.onReset}\r\n            >\r\n              Play Again\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Game from \"./components/Game\";\nimport \"./app.css\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { gameId: 0 };\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  resetGame() {\n    this.setState(prevState => ({\n      gameId: prevState.gameId + 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <h1>Challenge Numbers Game</h1>\n        <Game\n          key={this.state.gameId}\n          autoPlay={this.state.gameId > 0}\n          size={6}\n          sampleSize={4}\n          onReset={this.resetGame}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}